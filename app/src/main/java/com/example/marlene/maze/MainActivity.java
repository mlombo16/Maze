package com.example.marlene.maze;import android.content.Context;import android.graphics.Rect;import android.hardware.Sensor;import android.hardware.SensorEvent;import android.hardware.SensorEventListener;import android.hardware.SensorManager;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.DisplayMetrics;import android.view.Display;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import static com.example.marlene.maze.R.id.btnRestart;import static com.example.marlene.maze.R.id.text2;public class MainActivity extends AppCompatActivity implements SensorEventListener {    public float AccX, AccY = 0.0f;    public float PosX, PosY = 0.0f;    public float VelX, VelY = 0.0f;    public float frameTime = 0.6f;    public float xmax, ymax;    public boolean gameWin = false;    private SensorManager senSensorManager;    private Sensor senAccelerometer;    Button btnRestart;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Display display = getWindowManager().getDefaultDisplay();        xmax = (float) display.getWidth() - 50;        ymax = (float) display.getHeight() - 260;        senSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);        senAccelerometer = senSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);        senSensorManager.registerListener(this, senAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);        final TextView text2 = (TextView) findViewById(R.id.textView2);        btnRestart = (Button) findViewById(R.id.btnRestart);        btnRestart.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                text2.setText("Clicked!!");                gameWin = false;                ToggleRestart();                //onResume();            }        });    }    @Override    public void onSensorChanged(SensorEvent sensorEvent) {        Sensor mySensor = sensorEvent.sensor;        TextView text3 = (TextView) findViewById(R.id.textView3);        ImageView imgBall = (ImageView) findViewById(R.id.ivBall);        ImageView imgWin = (ImageView) findViewById(R.id.ivWin);        if (mySensor.getType() == Sensor.TYPE_ACCELEROMETER) {            //sensor values(x and y) and current time.            AccX = sensorEvent.values[0];            AccY = sensorEvent.values[1];            updateBall();            imgBall.setX(PosX);            imgBall.setY(PosY);            if (PosY + imgBall.getHeight() > imgWin.getTop() && PosY < imgWin.getTop() + imgWin.getHeight() && PosX + imgBall.getWidth() > imgWin.getLeft() && PosX < imgWin.getLeft() + imgWin.getWidth()) {                gameWin = true;                    text3.setText("triggered but you won");                    imgBall.setX(0);                    imgBall.setY(0);                    AccX = 0.0f;                    AccY = 0.0f;                    PosX = 0.0f;                    PosY = 0.0f;                    VelX = 0.0f;                    VelY = 0.0f;                    ToggleRestart();            } else {                text3.setText("jkjk" + PosY);            }        }    }    public void updateBall() {        VelX += (AccX * 1.5f * frameTime);        VelY += (AccY * 1.5f * frameTime);        float xS = (VelX / 2) * frameTime;        float yS = (VelY / 2) * frameTime;        PosX -= xS;        PosY += yS;        if (PosX > xmax) {            PosX = xmax;            VelX = 0.0f;        } else if (PosX < 0) {            PosX = 0;            VelX = 0.0f;        }        if (PosY > ymax) {            PosY = ymax;            VelY = 0.0f;        } else if (PosY < 0) {            PosY = 0;            VelY = 0.0f;        }    }    public void onAccuracyChanged(Sensor sensor, int accuracy) {    }    protected void onPause() {        super.onPause();        senSensorManager.unregisterListener(this);    }    protected void onResume() {        super.onResume();        senSensorManager.registerListener(this, senAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);    }   private void ToggleRestart() {       if (gameWin == true ) {           btnRestart.setVisibility(View.VISIBLE);           onPause();           gameWin = false;       } else {           btnRestart.setVisibility(View.GONE);           onResume();       }   }/*   class DrawMaze   {       void makeobjects(){           Rect rect = new Rect();           ImageView iV = new ImageView();           rect.left = iV.getLeft();           rect.top = iV.getTop();           rect.bottom = iV.getBottom();           rect.right = iV.getRight();       }       void CheckCollision(){       Rect rc1 = new Rect();       image.getDrawingRect(rc1);       if (Rect.intersects(rc1, rc2) {           // intersection is detected           // here is your method call       }       }   }   */}